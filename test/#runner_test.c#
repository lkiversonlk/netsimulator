#include "model/net.h"
#include "package/runner.h"
#include "operator/lattice_guassi_connector.h"
#include "package/runner_param.h"
#include "statistic/clusters.h"
#include "operator/net_constructor.h"

#include <assert.h>
#include <stdio.h>

int main(int argc, char **argv){
  Runner_param param;
  
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  //set the parameters
  param.num_n = 2;
  param.N = malloc(param.num_n * sizeof(net_size_t));
  param.N[0] = 100;
  param.N[1] = 81;

  param.epsilon_n = 1;
  param.epsilon = malloc(param.epsilon_n * sizeof(double));
  param.epsilon[0] = 0;
  //param.epsilon[0] = 0.2;

  param.alpha_n = 1;
  param.alpha = malloc(param.alpha_n * sizeof(double));
  param.alpha[0] = 0.05;
  //param.alpha[1] = 0.3;

  param.p_n = 51;
  param.p = malloc(param.p_n * sizeof(double));
  net_size_t i;
  for(i = 0;i < param.p_n; i++){
    param.p[i] = 0.50 + 0.01 * i;
  }
  //param.p[1] = 0.3;

  param.repeat = 100;

  /////////////////////////////////////////////////////////////////////////////////////////////////////////
  //run
  
  printf("   n,     epsi,   alph  ,    p    , r,stp, bigg    ,  sec\n");
  
  net_size_t i_n, i_ep, i_al, i_p, i_rep;
  for(i_n = 0; i_n < param.num_n; i_n++){
    //construct a net
    Net *net = net_create(4, param.N[i_n]);
    Clusters *clusters = clusters_create(param.N[i_n]);
    
    for(i_ep = 0; i_ep < param.epsilon_n; i_ep++){
      //for a given epsilon, we can calculate the weight of every edge
      //so we can define the connector
      //printf("load_break.c::for epsilon %f \n", param->epsilon[i_ep]);
      Connector *conn = lattice_guassi_connector_create(param.epsilon[i_ep], time(0));

      for(i_al = 0; i_al < param.alpha_n; i_al++){
	//for a given alpha, we can calculate the net's capacity
	connector_connect(net, conn);
	Runner *runner = runner_create(net, param.alpha[i_al], RUNNER_SILENT);

	for(i_p = 0; i_p < param.p_n; i_p++){
	  //we random attack the net, do the calculation and output
	  int attack_num = ((1-param.p[i_p]) * param.N[i_n] + 0.5);
	  for(i_rep = 0; i_rep < param.repeat; i_rep++){
	    /**
	     * first reconstruct the net
	     * then attack attack_num nodes
	     */
	    connector_connect(net, conn);
	    //printf("load_break.c::construct net\n");
	    struct timeval time;
	    gettimeofday(&time, NULL);
	    //printf("%ld\n", time.tv_usec);
	    attack(attack_num, net, time.tv_usec);

	    net_size_t broken;
	    net_size_t steps = 0;

	    while((broken = runner_loop(net, RUNNER_NOT_REVEAL, runner, RUNNER_SILENT))){
	      steps++;
	    }
	    //now we calculate the net's clusters' size 
	    clusters_calculate(net, clusters);
	    weight_t biggest = clusters_pop(clusters);
	    weight_t second  = clusters_pop(clusters);
	    if(second == -1) second = 0;
	    printf("%4d, %4f, %4f, %4f, %d, %d, %4f, %4f\n", param.N[i_n], param.epsilon[i_ep], param.alpha[i_al], param.p[i_p], i_rep, steps, biggest, second);
	  }//i_rep
	}//i_p
	runner_destroy(runner);
      }//i_al
      connector_destroy(conn);
    }//i_ep
    clusters_destroy(clusters);
    net_destroy(net);
  }//i_n
}
